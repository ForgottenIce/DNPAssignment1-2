@page "/s/{id}"
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject ISubPageService subPageService
@inject NavigationManager navMgr
<div class="container">
    @if (subPageData == null) {
        <label>Loading page...</label>
    }
    else {
        <div class="row">
            <div class="col-lg-4 order-last">
                <RadzenCard>
                    <RadzenText TextStyle="TextStyle.H4">@subPageData.Name</RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="pb-2"><strong>Page owner:</strong> @subPageData.Owner.Username</RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle2" class="mb-0"><strong>About this page:</strong></RadzenText>
                    <RadzenText TextStyle="TextStyle.Body1">@subPageData.Description</RadzenText>
                    <AuthorizeView>
                        <Authorized>
                            <hr/>
                            <RadzenButton Variant="Variant.Outlined" Text="Create post" Click="@((a) => navMgr.NavigateTo($"/s/{Id}/createpost"))" />
                        </Authorized>
                    </AuthorizeView>
                </RadzenCard>
            </div>

            <div class="col-8">
                @foreach (Post post in subPageData.Posts) {
                    <div class="row postcard">
                        <RadzenCard>
                            <a href="@($"/s/{subPageData.Id}/p/{post.Id}")">
                                <RadzenText TextStyle="TextStyle.H6">@post.Title</RadzenText>
                            </a>
                            <RadzenText TextStyle="TextStyle.Subtitle2">Posted by @post.Author.Username</RadzenText>
                            <RadzenText>@post.Body</RadzenText>
                            <RadzenText TextStyle="TextStyle.H6" class="mt-2"><RadzenIcon Icon="thumb_up" style="user-select: none"/>@(post.Likes) <RadzenIcon Icon="thumb_down" style="user-select: none"/>@(post.Dislikes)</RadzenText>
                        </RadzenCard>
                    </div>
                }      
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(msg)) {
        <br />
        <label style="color: red">Error: @msg</label>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private string msg = "";
    private Domain.Models.SubPage subPageData;

    protected override async Task OnInitializedAsync() {
        try {
             subPageData = await subPageService.GetByIdAsync(Id);
        }
        catch (Exception e) {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }
}
